!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Pendulum	pendulum.py	/^class Pendulum:$/;"	c
__init__	pendulum.py	/^    def __init__(self, length, theta, mass):$/;"	m	class:Pendulum
_d_term	run.py	/^def _d_term(theta1, theta2, a, i):$/;"	f
angle_between	pendulum.py	/^def angle_between(v1, v2):$/;"	f
attach_to	pendulum.py	/^    def attach_to(self, pendulum):$/;"	m	class:Pendulum
cos	run.py	/^from numpy import sin, cos$/;"	i
dterm_1stdiff	run.py	/^def dterm_1stdiff(theta, i):$/;"	f
dterm_2nddiff	run.py	/^def dterm_2nddiff(theta, i):$/;"	f
g	constants.py	/^g = 9.81  # m\/s$/;"	v
g	pendulum.py	/^from scipy.constants import g$/;"	i
g	run.py	/^from constants import g$/;"	i
get_results	run.py	/^def get_results(time_start, time_end, initial_angles,$/;"	f
gravity	pendulum.py	/^    def gravity(self):$/;"	m	class:Pendulum
initial_angles	run.py	/^    initial_angles = np.array([180, 175])$/;"	v
initial_omegas	run.py	/^    initial_omegas = np.array([0, 0])$/;"	v
length	run.py	/^    length = np.array([1, 1])$/;"	v
mass	run.py	/^    mass = np.array([10, 10])$/;"	v
matplotlib	run.py	/^import matplotlib.pyplot as plt$/;"	i
norm	pendulum.py	/^from numpy.linalg import norm$/;"	i
np	pendulum.py	/^import numpy as np$/;"	i
np	run.py	/^import numpy as np$/;"	i
number_of_points	run.py	/^    number_of_points = 10000$/;"	v
plt	run.py	/^import matplotlib.pyplot as plt$/;"	i
set_initial_conditions	run.py	/^def set_initial_conditions(theta, initial_angle, initial_omega, time_step):$/;"	f
sin	run.py	/^from numpy import sin, cos$/;"	i
tension	pendulum.py	/^    def tension(self):$/;"	m	class:Pendulum
time_end	run.py	/^    time_end = 10$/;"	v
time_start	run.py	/^    time_start = 0$/;"	v
unit_i	pendulum.py	/^unit_i = np.array([1.0, 0.0])$/;"	v
unit_j	pendulum.py	/^unit_j = np.array([0.0, 1.0])$/;"	v
update_acceleration	pendulum.py	/^    def update_acceleration(self, dt):$/;"	m	class:Pendulum
update_moment	pendulum.py	/^    def update_moment(self):$/;"	m	class:Pendulum
update_position	pendulum.py	/^    def update_position(self, dt):$/;"	m	class:Pendulum
update_velocity	pendulum.py	/^    def update_velocity(self, dt):$/;"	m	class:Pendulum
update_velocity_and_position	pendulum.py	/^    def update_velocity_and_position(self, dt):$/;"	m	class:Pendulum
